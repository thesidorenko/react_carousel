{"version":3,"sources":["components/Carousel.tsx","components/CarouselSetting.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","currentIndex","setCurrentIndex","length","lastIndex","isDisabledButtonPrev","isDisabledButtonNext","className","type","onClick","disabled","style","width","map","image","transform","transition","src","alt","CarouselSetting","setStep","setFrameSize","setItemWidth","setAnimationDuration","setInfinite","htmlFor","id","min","max","value","onChange","e","currentTarget","target","checked","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b3fa316.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const length = images.length; // eslint-disable-line\n  const lastIndex = length - frameSize;\n\n  const isDisabledButtonPrev = (infinite && frameSize === length)\n    || (currentIndex === 0 && !infinite);\n  const isDisabledButtonNext = (infinite && frameSize === length)\n    || (currentIndex === lastIndex && !infinite);\n\n  const handlePrevSlide = () => {\n    if (currentIndex - step > 0) {\n      setCurrentIndex(currentIndex - step);\n    } else {\n      setCurrentIndex(0);\n    }\n\n    if (infinite && currentIndex === 0) {\n      setCurrentIndex(lastIndex);\n    }\n  };\n\n  const handleNextSlide = () => {\n    if (currentIndex + step < lastIndex) {\n      setCurrentIndex(currentIndex + step);\n    } else {\n      setCurrentIndex(lastIndex);\n    }\n\n    if (infinite && currentIndex === lastIndex) {\n      setCurrentIndex(0);\n    }\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <button\n        type=\"button\"\n        onClick={handlePrevSlide}\n        disabled={isDisabledButtonPrev}\n        className=\"Carousel__button Carousel__button-prev\"\n      >\n        <span className=\"material-symbols-outlined\">\n          arrow_back_ios\n        </span>\n      </button>\n\n      <ul\n        className=\"Carousel__list\"\n        style={{ width: `${itemWidth * frameSize}px` }}\n      >\n        {images.map((image) => (\n          <li\n            key={image}\n            className=\"Carousel__item\"\n            style={{\n              transform: `translateX(${-currentIndex * itemWidth}px)`,\n              transition: `transform ${animationDuration}ms`,\n            }}\n          >\n            <img\n              src={image}\n              alt={image}\n              width={itemWidth}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        data-cy=\"next\"\n        onClick={handleNextSlide}\n        disabled={isDisabledButtonNext}\n        className=\"Carousel__button Carousel__button-next\"\n      >\n        <span className=\"material-symbols-outlined\">\n          arrow_forward_ios\n        </span>\n      </button>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './CarouselSetting.scss';\n\ninterface Props {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  setStep: (newStep: number) => void,\n  setFrameSize: (newFrameSize: number) => void,\n  setItemWidth: (newItemWidth: number) => void,\n  setAnimationDuration: (newAnimationDuration: number) => void,\n  setInfinite: (newInfinite: boolean) => void,\n}\n\nconst CarouselSetting: React.FC<Props> = ({\n  images,\n  step,\n  setStep,\n  frameSize,\n  setFrameSize,\n  itemWidth,\n  setItemWidth,\n  animationDuration,\n  setAnimationDuration,\n  setInfinite,\n}) => (\n  <form className=\"form\">\n    <label className=\"form__label\" htmlFor=\"stepId\">\n      Step:\n      <input\n        id=\"stepId\"\n        type=\"number\"\n        className=\"form__input\"\n        min={1}\n        max={images.length - frameSize}\n        value={step}\n        onChange={e => setStep(+e.currentTarget.value)}\n      />\n    </label>\n    <label className=\"form__label\" htmlFor=\"frameId\">\n      Frame size:\n      <input\n        id=\"frameId\"\n        type=\"number\"\n        className=\"form__input\"\n        min={1}\n        max={images.length}\n        value={frameSize}\n        onChange={e => setFrameSize(+e.currentTarget.value)}\n      />\n    </label>\n    <label className=\"form__label\" htmlFor=\"itemId\">\n      Item width:\n      <input\n        id=\"itemId\"\n        type=\"number\"\n        className=\"form__input\"\n        min={10}\n        step={10}\n        value={itemWidth}\n        onChange={e => setItemWidth(+e.currentTarget.value)}\n      />\n    </label>\n    <label className=\"form__label\" htmlFor=\"animationDurationId\">\n      Animation duration:\n      <input\n        id=\"animationDurationId\"\n        type=\"number\"\n        className=\"form__input\"\n        min={0}\n        step={100}\n        value={animationDuration}\n        onChange={e => setAnimationDuration(+e.currentTarget.value)}\n      />\n    </label>\n    <label className=\"form__label\" htmlFor=\"infiniteId\">\n      Infinite:\n      <input\n        id=\"infiniteId\"\n        type=\"checkbox\"\n        className=\"form__input\"\n        onChange={e => setInfinite(e.target.checked)}\n      />\n    </label>\n  </form>\n);\n\nexport default CarouselSetting;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport CarouselSetting from './components/CarouselSetting';\n\nconst images: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App: React.FC = () => {\n  const [step, setStep] = useState(3);\n  const [frameSize, setFrameSize] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 data-cy='title'>Carousel with {images.length} images</h1>\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n      />\n      <CarouselSetting\n        images={images}\n        step={step}\n        setStep={setStep}\n        frameSize={frameSize}\n        setFrameSize={setFrameSize}\n        itemWidth={itemWidth}\n        setItemWidth={setItemWidth}\n        animationDuration={animationDuration}\n        setAnimationDuration={setAnimationDuration}\n        setInfinite={setInfinite}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}